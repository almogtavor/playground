plugins {
    id 'java'
    id "com.google.protobuf" version "0.8.18"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
//sourceSets {
////    main {
////        proto {
////            // In addition to the default 'src/main/proto'
////            srcDir 'pipeline/example'
//////            srcDir 'src/main/protocolbuffers'
//////            // In addition to the default '**/*.proto' (use with caution).
//////            // Using an extension other than 'proto' is NOT recommended,
//////            // because when proto files are published along with class files, we can
//////            // only tell the type of a file from its extension.
//////            include '**/*.protodevel'
////        }
////        java {
////            srcDir 'schema/solution'
////        }
////    }
//    generated {
//        srcDir 'pipeline.example'
//    }
//    test {
//        proto {
//            // In addition to the default 'src/test/proto'
//            srcDir 'src/test/protocolbuffers'
//        }
//    }
//}
task prepareKotlinBuildScriptModel {
}
dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.0.0'
    if (JavaVersion.current().isJava9Compatible()) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        implementation 'javax.annotation:javax.annotation-api:1.3.1'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    annotationProcessor 'org.mapstruct.extensions.spring:mapstruct-spring-extensions:0.1.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    generateProtoTasks {
        all().each { task ->
            // If true, will generate a descriptor_set.desc file under
            // $generatedFilesBaseDir/$sourceSet. Default is false.
            // See --descriptor_set_out in protoc documentation about what it is.
            task.generateDescriptorSet = true

            // Allows to override the default for the descriptor set location
            task.descriptorSetOptions.path =
                    "${projectDir}/build/descriptors/${task.sourceSet.name}.dsc"

            // If true, the descriptor set will contain line number information
            // and comments. Default is false.
            task.descriptorSetOptions.includeSourceInfo = true

            // If true, the descriptor set will contain all transitive imports and
            // is therefore self-contained. Default is false.
            task.descriptorSetOptions.includeImports = true

            task.builtins {
                java {
                }
            }
        }
    }
}
test {
    useJUnitPlatform()
}